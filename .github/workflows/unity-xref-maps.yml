name: Generate Unity XRef Maps
on:
  schedule:
    # do once a week at midnight on Sunday
    - cron: '0 0 * * 0'
  workflow_dispatch:
permissions:
  actions: read
  pages: write
  id-token: write
concurrency:
  group: unity-xref-maps
  cancel-in-progress: true
jobs:
  # enumerate all unity versions based on branch names of UnityCSReference repo
  get_unity_versions:
    runs-on: ubuntu-latest
    outputs:
      UNITY_VERSIONS: ${{ steps.get_unity_versions.outputs.UNITY_VERSIONS }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Unity-Technologies/UnityCSReference
          fetch-depth: 0
          path: UnityCSReference
      # get the unity versions from the branch names and drop origin/ prefix as json array
      - id: get_unity_versions
        run: |
          BRANCHES=$(git -C UnityCSReference branch -r --list 'origin/[0-9]*.[0-9]*')
          VERSIONS=$(echo "$BRANCHES" | sed 's|origin/||g' | tr -s ' ' '\n' | jq -R -s 'split("\n") | map(select(. != ""))' | jq -c .)
          echo "Versions: $VERSIONS"
          echo "UNITY_VERSIONS=$VERSIONS" >> "$GITHUB_OUTPUT"
  # genearte docfx metadata for each unity version
  generate_metadata:
    needs: get_unity_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity_version: ${{ fromJson(needs.get_unity_versions.outputs.UNITY_VERSIONS) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - run: |
          dotnet tool install -g docfx
          # for versions between 2019.1 and 2021.3 (inclusive) add Debug configuration property
          if [[ ${{ matrix.unity_version }} == 2019.* || ${{ matrix.unity_version }} == 2020.* || ${{ matrix.unity_version }} == 2021.* ]]; then
            docfx metadata ${{ github.workspace }}/.docfx/docfx.json --output ${{ github.workspace }}/.docfx/xref/${{ matrix.unity_version }} --logLevel error --property Configuration=Debug 2>&1
          else
            docfx metadata ${{ github.workspace }}/.docfx/docfx.json --output ${{ github.workspace }}/.docfx/xref/${{ matrix.unity_version }} --logLevel error 2>&1
          fi

          # check if metadata generation was successful
          if [ $? -ne 0 ]; then
            echo "Failed to generate metadata for Unity version ${{ matrix.unity_version }}"
            exit 1
          fi

          # check if directoy exists
          if [ ! -d ${{ github.workspace }}/.docfx/xref/${{ matrix.unity_version }} ]; then
            echo "No xref directory found for Unity version ${{ matrix.unity_version }}"
            exit 1
          fi

          # check if xref directory is not empty
          if [ ! "$(ls -A ${{ github.workspace }}/.docfx/xref/${{ matrix.unity_version }})" ]; then
            echo "No metadata found for Unity version ${{ matrix.unity_version }}"
            exit 1
          fi

          chmod +x ${{ github.workspace }}/generate-xref-map.sh
          ${{ github.workspace }}/generate-xref-map.sh ${{ matrix.unity_version }} ${{ github.workspace }}/.docfx/xref/${{ matrix.unity_version }} ${{ github.workspace }}/_site
      - uses: actions/upload-artifact@v4
        with:
          name: xref-${{ matrix.unity_version }}
          path: ${{ github.workspace }}/_site
  # get the xref maps from the artifacts and publish them to gh-pages
  publish_xref_maps:
    needs: generate_metadata
    runs-on: ubuntu-latest
    steps:
      # download all xref maps from the artifacts
      - uses: actions/download-artifact@v4
        with:
          name: xref-*
          path: ${{ github.workspace }}/_site
      # make sure the _site directory exists and is populated by the xref maps
      - run: |
          if [ ! -d ${{ github.workspace }}/_site ]; then
            # fail the job if _site directory does not exist
            echo "No xref maps found in _site directory"
            exit 1
          fi

          ls -R ${{ github.workspace }}/_site

          # check if _site directory is not empty
          if [ ! "$(ls -R ${{ github.workspace }}/_site)" ]; then
            # fail the job if _site directory is empty
            echo "No xref maps found in _site directory"
            exit 1
          fi
      # generate index.html for the xref maps in _site
      - run: |
          echo "<html><head><title>Unity XRef Maps</title></head><body><h1>Unity XRef Maps</h1><ul>" > ${{ github.workspace }}/_site/index.html
          for f in ${{ github.workspace }}/xref-*/index.html; do
            # use relative path to _site and only show the version number in link text
            echo "<li><a href=\"${f#${{ github.workspace }}/_site/}\">${f#${{ github.workspace }}/xref-}</a></li>" >> ${{ github.workspace }}/_site/index.html
          done
          echo "</ul></body></html>" >> ${{ github.workspace }}/_site/index.html
      - uses: actions/upload-pages-artifact@v3
      - uses: actions/deploy-pages@v4
